{"version":3,"sources":["components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","noteGlobal","voteTab","monAvisTab","useState","watchMovie","setWatchMovie","countWatchMovie","setCcountWatchMovie","myRatingMovie","setMyRatingMovie","isVoted","setIsVoted","colorLiked","isAlreadyLiked","console","log","fontIconStyle","margin","cursor","color","vu","note","Math","floor","globalRating","moyenne","i","push","icon","faStar","size","colorStar","j","count","onClick","setCountAndRating","voteNumber","globalCountRating","Col","style","marginBottom","xs","md","lg","Card","CardImg","top","width","src","movieImg","alt","CardBody","padding","CardTitle","nameFromFront","movieName","imgFromFront","handleClickDeleteMovieParent","handleClickAddMovieParent","faHeart","CardSubtitle","faVideo","Badge","CardText","desc","App","moviesData","setMoviesData","useEffect","a","fetch","rawResponse","json","response","movies","getMoviesData","moviesCount","setMoviesCount","popoverOpen","setPopoverOpen","moviesWishList","setMoviesWishList","handleClickAddMovie","name","img","handleClickDeleteMovie","filter","e","height","backgroundColor","Container","Nav","pills","NavItem","heigth","NavLink","listStyle","Button","id","type","UncontrolledPopover","trigger","placement","isOpen","target","toggle","PopoverHeader","PopoverBody","borderColor","length","map","wishMovi","body","key","Row","movie","result","find","undefined","movieDesc","vote","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.800a3fda.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport {Col} from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart, faStar, faVideo} from '@fortawesome/free-solid-svg-icons'\r\nimport {\r\n    Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle, Badge\r\n  } from 'reactstrap';\r\n  \r\n\r\n  export default function Movie(props){\r\n    \r\n    const noteGlobal = []\r\n    const voteTab = []\r\n    const monAvisTab = []\r\n\r\n    const [watchMovie, setWatchMovie] = useState(false)\r\n    const [countWatchMovie, setCcountWatchMovie] = useState(0)\r\n    const [myRatingMovie, setMyRatingMovie]= useState(0)\r\n    const [isVoted, setIsVoted] = useState(0)\r\n   \r\n    const toggleLike = (nameFromFront, imgFromFront) =>{\r\n      if(props.isAlreadyLiked){\r\n        props.handleClickDeleteMovieParent(nameFromFront)\r\n        }\r\n      else{\r\n        props.handleClickAddMovieParent(nameFromFront,imgFromFront)\r\n      }}\r\n\r\n    let colorLiked = ''\r\n      if(props.isAlreadyLiked){\r\n        console.log('color')\r\n        colorLiked = '#e74c3c'\r\n      }\r\n    \r\n    const fontIconStyle = {\r\n      margin:'0 5px', \r\n      cursor:'pointer',\r\n      color: `${colorLiked}`\r\n    }\r\n\r\n    let vu = ''\r\n    const handleClickWatchVideo = ()=>{\r\n      setWatchMovie(true)\r\n      setCcountWatchMovie(countWatchMovie+1)\r\n    }\r\n    if(watchMovie){\r\n      vu='#e74c3c'\r\n    }\r\n    \r\n    const note = Math.floor(props.globalRating)\r\n    const moyenne = myRatingMovie? (myRatingMovie + note) / 2 :note\r\n    for(var i = 0; i< 10 ;i++ ){\r\n      if(i < moyenne){\r\n        noteGlobal.push(<FontAwesomeIcon icon={faStar} size=\"sm\" color={\"#efc300\"}/> )\r\n      }else{\r\n        noteGlobal.push(<FontAwesomeIcon icon={faStar} size=\"sm\"/>)\r\n      }\r\n    }\r\n\r\n    for(var j=0; j<10; j++){\r\n      var colorStar = \"\"\r\n      if(j < myRatingMovie){\r\n        colorStar = \"#efc300\"\r\n      }\r\n      let count = j+1\r\n      monAvisTab.push(<FontAwesomeIcon onClick={()=>setCountAndRating(count)} size=\"sm\" icon={faStar} color={`${colorStar}`} />)\r\n    }\r\n    const countPlus = () =>{\r\n      setIsVoted(1)\r\n      if(myRatingMovie < 10){\r\n      setMyRatingMovie(myRatingMovie+1)\r\n      }else{setMyRatingMovie(10)\r\n      }\r\n    }\r\n    const countMoins = () =>{\r\n      setIsVoted(1)\r\n      if(myRatingMovie > 0){\r\n      setMyRatingMovie(myRatingMovie-1)\r\n      }else{ setMyRatingMovie(0)}\r\n    }\r\n    const setCountAndRating = (count)=>{\r\n      setMyRatingMovie(count)\r\n      setIsVoted(1)\r\n    }\r\n    const voteNumber = props.globalCountRating + isVoted\r\n    \r\n    \r\n\r\n      return (\r\n           <Col style={{marginBottom:5}} xs=\"12\" md=\"8\" lg=\"4\">         \r\n              <Card  >\r\n                <CardImg top width=\"100%\" src={`/img${props.movieImg}`} alt=\"RdN\" />\r\n                <CardBody style={{padding:10}}>\r\n                  <CardTitle onClick={()=>toggleLike(props.movieName, props.movieImg)} >Like\r\n                    <FontAwesomeIcon  style={fontIconStyle} icon={faHeart} />\r\n                    </CardTitle> \r\n                  <CardSubtitle> Nombre de vues  \r\n                    <FontAwesomeIcon onClick={()=>handleClickWatchVideo()} style={{margin:'0 5px', cursor:'pointer',color:`${vu}`}} icon={faVideo} />\r\n                    <Badge >{countWatchMovie}</Badge>\r\n                    </CardSubtitle>\r\n                  <CardText> Mon avis :  \r\n                    <Badge onClick={countMoins} style={{cursor:'pointer' }} size=\"sm\">-</Badge> \r\n                      {monAvisTab}\r\n                    <Badge onClick={countPlus} style={{cursor:'pointer' }} size=\"sm\">+</Badge>\r\n                  </CardText>\r\n                  <CardText> Moyenne {voteTab} \r\n                  </CardText>\r\n                  <CardText> Global avis {noteGlobal}  \r\n                  <Badge>{voteNumber}</Badge>\r\n                  </CardText> \r\n                  <CardText> {props.movieName}</CardText>\r\n                  <CardText> {props.desc} </CardText>\r\n\r\n                </CardBody>\r\n              </Card>\r\n          \r\n          </Col>\r\n          );\r\n    };\r\n\r\n ","import React, {useState, useEffect} from 'react';\nimport { NavLink, Nav, NavItem, Button,Row, Container,UncontrolledPopover,PopoverHeader,PopoverBody,Card, CardTitle,CardImg} from 'reactstrap';\nimport Movie from \"./components/Movie\"\nimport './App.css';\n\n\nfunction App() {\n\nconst [moviesData, setMoviesData] = useState([]) \n\n useEffect( () => {\n  async function getMoviesData(){\n    const rawResponse = await fetch('/newmovies');\n    const response = await rawResponse.json()\n    setMoviesData(response.movies)\n    console.log(rawResponse,response, \"yeeeeeeeeeeeeeeeeeeeeeeeeah\")\n  }\n  getMoviesData()\n},[])\n\nuseEffect( () => {\n  return () => {console.log('App is detruit')}\n},[])\n\n// var moviesData = [\n//   {name:\"Star Wars : L'ascension de Skywalker\", desc:\"La conclusion de la saga Skywalker. De nouvelles légendes vont naître dans cette ...\", img:\"/starwars.jpg\", note:6.7, vote:5},\n//   {name:\"Maléfique : Le pouvoir du mal\", desc: \"Plusieurs années après avoir découvert pourquoi la plus célèbre méchante Disney avait un cœur ...\", img:\"/maleficent.jpg\", note:8.2, vote:3},\n//   {name:\"Jumanji: The Next Level\", desc: \"L’équipe est de retour, mais le jeu a changé. Alors qu’ils retournent dans Jumanji pour secourir ...\", img:\"/jumanji.jpg\", note:4, vote:5},\n//   {name:\"Once Upon a Time... in Hollywood\", desc: \"En 1969, Rick Dalton – star déclinante d'une série télévisée de western – et Cliff Booth ...\", img:\"/once_upon.jpg\", note:5.6, vote:7},\n//   {name:\"La Reine des neiges 2\", desc: \"Elsa, Anna, Kristoff, Olaf et Sven voyagent bien au-delà des portes d’Arendelle à la recherche de réponses ...\", img:\"/frozen.jpg\", note:4.6, vote:3},\n//   {name:\"Terminator: Dark Fate\", desc: \"De nos jours à Mexico. Dani Ramos, 21 ans, travaille sur une chaîne de montage dans une usine automobile...\", img:\"/terminator.jpg\", note:6.1, vote:1},\n// ]\n\nconst [moviesCount , setMoviesCount  ] = useState(0)\nconst [popoverOpen, setPopoverOpen] = useState(false);\nconst [moviesWishList, setMoviesWishList] = useState([])\n\nconst toggle = () => setPopoverOpen(!popoverOpen);\n\nconst handleClickAddMovie = (nameFromFront, imgFromFront) => {\n    setMoviesWishList([...moviesWishList,{name:nameFromFront, img:imgFromFront}])\n    setMoviesCount(moviesCount+1)\n  }\n\nconst handleClickDeleteMovie = (name) => {\n    setMoviesWishList(moviesWishList.filter(e => e.name !== name))\n    setMoviesCount(moviesCount-1)\n      }\n\n      return (\n    <div style={{height: \"100vh\",backgroundColor:\"#3b4754\"}}>\n      <Container >\n      <Nav pills style={{padding:15}}>\n          <NavItem>\n          <img style={{heigth:\"100%\"}} src='/img/logo.png' alt=\"logo\"></img>\n            </NavItem>\n            <NavItem>\n            <NavLink style={{listStyle: \"none\"}}>Last Releases</NavLink>\n            </NavItem>\n            <NavItem>\n              <Button id=\"Popover1\" type=\"button\">\n              {moviesCount} Films\n              </Button>\n\n              <UncontrolledPopover trigger=\"legacy\" placement=\"bottom\" isOpen={popoverOpen} target=\"Popover1\" toggle={toggle}>\n                <PopoverHeader>WishList</PopoverHeader>\n                <PopoverBody style={{ backgroundColor: '#333', borderColor: '#333', color:\"white\" }}>\n                {moviesWishList.length === 0 ? 'Liste vide':'' }\n\n                {moviesWishList.map((wishMovi, i)=>{\n                  return(\n                    <Card body key={i} >\n                    <CardImg top width=\"20%\" src={`/img${wishMovi.img}`} alt=\"Card image cap\" />\n                      <CardTitle style={{color:'black'}} >{wishMovi.name}</CardTitle>\n                      <Button onClick={()=>handleClickDeleteMovie(wishMovi.name)} >Delete</Button>\n                    </Card>)\n                })}\n                    \n                </PopoverBody>\n              </UncontrolledPopover >\n            </NavItem>\n        </Nav>\n        <Row >\n       {moviesData.map((movie, i)=>{\n        let result = moviesWishList.find(e => e.name === movie.name)\n        console.log(result)\n        let isAlreadyLiked = false\n        if(result !== undefined){\n          isAlreadyLiked = true\n        }\n          return (<Movie key={i} handleClickDeleteMovieParent={handleClickDeleteMovie} isAlreadyLiked={isAlreadyLiked} handleClickAddMovieParent={handleClickAddMovie } movieName={movie.name} movieDesc={movie.desc} movieImg={movie.img} globalRating={movie.note} globalCountRating={movie.vote} />\n          )\n          })}\n         \n        </Row>\n    </Container >\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}